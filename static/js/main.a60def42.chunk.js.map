{"version":3,"sources":["components/ArraySizeControl/ArraySizeControl.js","components/RightSideContext/RightSideContext.js","components/Algorithms/AlgorithmsBox.js","components/SpeedController/SpeedController.js","components/ResetButton/Reset.js","components/PlayButton/PlayButton.js","components/Bars/Bars.js","components/algo/helpers.js","components/algo/BubbleSort.js","components/algo/InsertionSort.js","components/algo/MergeSort.js","components/algo/QuickSort.js","components/algo/SelectionSort.js","max.wav","components/SideConcepts/SideConcepts.js","components/OpenAlgoBar/OpenAlgoBar.js","components/OpenAlgoBar/OpenAlgoBarDown.js","App.js","reportWebVitals.js","index.js"],"names":["ArraySizeControl","value","handleOnInput","spanClass","className","style","left","type","min","max","onChange","steps","React","memo","RightSideData","AlogrithmNames","AlogrithmDescription","WorstCase","AverageCase","BestCase","Pseudocode","Object","freeze","AlgorithmsBox","algorithmType","algorithmfun","SelectionValues","map","res","push","name","id","event","target","index","SpeedController","handleOnSpeed","StopButton","resetme","onClick","class","PlayButton","time","Bars","length","color","useState","setLength","useEffect","barStyle","background","height","marginTop","width","swap","array","indexA","indexB","temp","insertStep","arrayNew","position","arraySteps","currentStep","slice","splice","bubbleSort","colorSteps","colorKey","i","j","Array","fill","insertionSort","key","console","log","merge","L","R","shift","updateColor","concat","start","end","mergeSort","mid","Math","floor","quickSort","A","B","C","middleValue","sort","indexOf","pickPivot","pivot","bigIndex","selectionSort","min_index","SideConcepts","DownArrow","AlgoName","AlgoDes","AlgoWorst","AlgoAverage","AlgoBest","AlgoPseudocode","Worst","OpenAlgoBar","spanleft","spanright","sleft","sright","display","OpenAlgoBarDown","audioClips","sound","Max","label","App","state","timeouts","barCount","delay","algorithm","speedValue","speedSpanClass","re","nameOfAlgo","nameofDes","nameOfWorst","nameOfAverage","nameOfBest","nameOfPseudocode","M1","M2","navWidth","SoundPlay","src","Howl","play","RenderButtonAndSound","soundObj","newAlgorithmsTypes","setState","generateBars","ALGORITHMS","BubbleSort","MergeSort","QuickSort","InsertionSort","SelectionSort","setTimeouts","clearTimeouts","timeout","setTimeout","forEach","clearTimeout","clearColorKey","blankKey","generateSteps","generateRandomNumber","random","arr","parseInt","closeNav","openNav","this","Howler","volume","barsDiv","zIndex","href","AlgorithmsTypes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a60def42.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ArraySizeControl.css'\r\n\r\nfunction ArraySizeControl({value, handleOnInput, spanClass}) {\r\n    return (\r\n      <div className=\"CommonDev-ArraySize\">\r\n        <div className=\"range\">\r\n               <div className=\"sliderValue\">\r\n                 <span   className={spanClass} style={{left:`${value/2}%`}}>{value}</span>\r\n               </div>\r\n               <div className=\"field\">\r\n                  <div className=\"value left\">\r\n                     10\r\n                  </div>\r\n                  <input className=\"speedinput\" type=\"range\" min=\"10\" max=\"200\" value={value}\r\n                   onChange={handleOnInput} steps=\"1\" />\r\n                  <div className=\"value right\">\r\n                     200\r\n                  </div>\r\n               </div>\r\n         </div>\r\n      </div>       \r\n    )\r\n}\r\n\r\nexport default React.memo(ArraySizeControl)\r\n","const RightSideData = {\r\n    AlogrithmNames: ['Select Algorithm' ,'Bubble Sort', 'Merge Sort', 'Quick Sort', 'Insertion Sort', 'Selection Sort'],\r\n    AlogrithmDescription: [\r\n        \"Bubble sort is a simple sorting algorithm. This sorting algorithm is comparison-based algorithm in which each pair of adjacent elements is compared and the elements are swapped if they are not in order.\",\r\n        \"Merge sort is a sorting technique based on divide and conquer technique. Merge sort first divides the array into equal halves and then combines them in a sorted manner.\",\r\n        \"Quick sort is a highly efficient sorting algorithm and is based on partitioning of array of data into smaller arrays. A large array is partitioned into two arrays one of which holds values smaller than the specified value, say pivot, based on which the partition is made and another array holds values greater than the pivot value.\",\r\n        \"This is an in-place comparison-based sorting algorithm. Here, a sub-list is maintained which is always sorted. For example, the lower part of an array is maintained to be sorted. An element which is to be 'insert'ed in this sorted sub-list, has to find its appropriate place and then it has to be inserted there. Hence the name, insertion sort.\",\r\n        \"Selection sort is a simple sorting algorithm. This sorting algorithm is an in-place comparison-based algorithm in which the list is divided into two parts, the sorted part at the left end and the unsorted part at the right end. Initially, the sorted part is empty and the unsorted part is the entire list.\"\r\n    ],\r\n    WorstCase: [\r\n        ['O','n','2',''],\r\n        ['O','n','', 'logn'],\r\n        ['O','n','2',''],\r\n        ['O','n','2',''],\r\n        ['O','n','2','']\r\n    ],\r\n    AverageCase: [\r\n        ['O','n','2',''],\r\n        ['O','n','', 'logn'],\r\n        ['O','n','2',''],\r\n        ['O','n','2',''],\r\n        ['O','n','2','']\r\n    ],\r\n    BestCase: [\r\n        ['O','n','',''],\r\n        ['O','n','', 'logn'],\r\n        ['O','n','',''],\r\n        ['O','n','2',''],\r\n        ['O','n','2','']\r\n    ],\r\n    Pseudocode: [\r\n        [\r\n            [\r\n            <p>\r\n                procedure bubbleSort( list : array of items )<br/><br/>loop = list.count;<br/><br/>for i = 0 to loop-1 do:<br/>swapped = false<br/><br/>for j = 0 to loop-1 do:<br/><br/>/* compare the adjacent elements */<br/>if list[j] > list[j+1] then<br/>/* swap them */<br/>swap( list[j], list[j+1] )<br/>swapped = true<br/>end if<br/><br/>end for<br/><br/>/*if no number was swapped that means<br/>array is sorted now, break the loop.*/<br/><br/>if(not swapped) then<br/>break<br/>end if<br/><br/>end for<br/><br/>end procedure return list<br/>\r\n            </p>\r\n            ],\r\n            [\r\n                <p>\r\n                    procedure mergesort( var a as array )<br/>\r\n                    if ( n == 1 ) return a<br/><br/>\r\n                 \r\n                    var l1 as array = a[0] ... a[n/2]<br/>\r\n                    var l2 as array = a[n/2+1] ... a[n]<br/><br/>\r\n                 \r\n                    l1 = mergesort( l1 )<br/>\r\n                    l2 = mergesort( l2 )<br/><br/>\r\n                 \r\n                    return merge( l1, l2 )<br/>\r\n                 end procedure<br/><br/>\r\n                 \r\n                 procedure merge( var a as array, var b as array )<br/><br/>\r\n                 \r\n                    var c as array<br/>\r\n                    while ( a and b have elements )<br/>\r\n                       if ( a[0] > b[0] )<br/>\r\n                          add b[0] to the end of c<br/>\r\n                          remove b[0] from b<br/>\r\n                       else<br/>\r\n                          add a[0] to the end of c<br/>\r\n                          remove a[0] from a<br/>\r\n                       end if<br/>\r\n                    end while<br/><br/>\r\n                    \r\n                    while ( a has elements )<br/>\r\n                       add a[0] to the end of c<br/>\r\n                       remove a[0] from a<br/>\r\n                    end while<br/><br/>\r\n                    \r\n                    while ( b has elements )<br/>\r\n                       add b[0] to the end of c<br/>\r\n                       remove b[0] from b<br/>\r\n                    end while<br/><br/>\r\n                    \r\n                    return c<br/><br/>\r\n                 \t\r\n                 end procedure<br/>\r\n                </p>\r\n            ],\r\n            [\r\n                <p>\r\n                function partitionFunc(left, right, pivot)\r\n                <br/>leftPointer = left\r\n                <br/>rightPointer = right - 1\r\n             \r\n                <br/><br/>while True do\r\n                <br/>while A[&plus;&plus;leftPointer] &lt; pivot do\r\n                <br/>//do-nothing            \r\n                <br/>end while\r\n                     \r\n                <br/><br/>while rightPointer &gt; 0 &amp;&amp; A[--rightPointer] &gt; pivot do\r\n                <br/>//do-nothing         \r\n                <br/>end while\r\n                     \r\n                <br/><br/>if leftPointer &gt;= rightPointer\r\n                <br/>break\r\n                <br/>else                \r\n                <br/> swap leftPointer,rightPointer\r\n                <br/> end if\r\n                     \r\n                <br/><br/>end while \r\n                 \r\n                <br/><br/>swap leftPointer,right\r\n                <br/>return leftPointer\r\n                 \r\n                <br/><br/>end function\r\n                                        \r\n                </p>\r\n            ],\r\n            [\r\n                <p>\r\n                procedure insertionSort( A : array of items )\r\n                <br/>int holePosition\r\n                <br/>int valueToInsert\r\n                 \r\n                <br/><br/>for i = 1 to length(A) inclusive do:\r\n                 \r\n                <br/><br/> /* select value to be inserted */\r\n                <br/>valueToInsert = A[i]\r\n                <br/>holePosition = i\r\n                   \r\n                <br/><br/>/*locate hole position for the element to be inserted */\r\n                     \r\n                <br/><br/>while holePosition > 0 and A[holePosition-1] > valueToInsert do:\r\n                <br/>A[holePosition] = A[holePosition-1]\r\n                <br/>  holePosition = holePosition -1\r\n                <br/>end while\r\n                     \r\n                <br/><br/>/* insert the number at hole position */\r\n                <br/>A[holePosition] = valueToInsert\r\n                   \r\n                <br/><br/>end for\r\n                 \r\n                <br/><br/>end procedure\r\n\r\n                </p>\r\n            ],\r\n            [\r\n                <p>\r\n                procedure selection sort<br/> \r\n                list  : array of items<br/>\r\n                n     : size of list<br/><br/>\r\n             \r\n                for i = 1 to n - 1<br/>\r\n                /* set current element as minimum*/<br/>\r\n                   min = i    <br/><br/>\r\n               \r\n                   /* check the element to be minimum */<br/><br/>\r\n             \r\n                   for j = i+1 to n <br/>\r\n                      {/* if list[j] < list[] then<br/> */}\r\n                         min = j;<br/>\r\n                      end if<br/>\r\n                   end for<br/><br/>\r\n             \r\n                   /* swap the minimum element with the current element*/<br/>\r\n                   if indexMin != i  then<br/>\r\n                      swap list[min] and list[i]<br/>\r\n                   end if<br/>\r\n                end for<br/><br/>\r\n                 \r\n             end procedure<br/>\r\n\r\n                </p>\r\n            ]\r\n            \r\n        ]\r\n    ]\r\n}\r\n\r\nObject.freeze(RightSideData);\r\n\r\nexport default RightSideData","import React from 'react'\r\nimport './AlgorithmsBox.css'\r\nimport RightSideData from '../RightSideContext/RightSideContext';\r\n\r\nfunction AlgorithmsBox({algorithmType ,algorithmfun}) {\r\n    const SelectionValues=[];\r\n    (RightSideData.AlogrithmNames).map(res => {\r\n        SelectionValues.push(res)\r\n    })\r\n    const handleSelectAlgorithm = (event) =>{\r\n       algorithmType = event.target.value\r\n       algorithmfun(algorithmType)\r\n    }\r\n    return (\r\n        <div className=\"CommonDev-Algorithm\">\r\n        <select className=\"SelectAlgorithm\" name=\"Algorithm\" id=\"Algorithm\" onChange={handleSelectAlgorithm}>\r\n            {\r\n               SelectionValues.map((res,index) => (\r\n                   <option  key={index} value={res}>{res}</option>\r\n               ))\r\n            }\r\n        </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AlgorithmsBox\r\n","import React from 'react'\r\nimport './SpeedController.css'\r\n\r\nfunction SpeedController({value, handleOnSpeed, spanClass}) {\r\n    return (\r\n      <div className=\"CommonDev-SortingSpeed\">\r\n        <div className=\"range\">\r\n               <div className=\"sliderValue\">\r\n                 <span  className={spanClass} style={{left:`${value*10}%`}}>{value}</span>\r\n                 \r\n               </div>\r\n               <div className=\"field\">\r\n                  <div className=\"value left\">\r\n                     1x\r\n                  </div>\r\n                  <input className=\"speedinput\" type=\"range\" min=\"1\" max=\"10\" value={value}\r\n                   onChange={handleOnSpeed} steps=\"1\" />\r\n                  <div className=\"value right\">\r\n                     10x\r\n                  </div>\r\n               </div>\r\n         </div>\r\n      </div>       \r\n    )\r\n}\r\n\r\nexport default React.memo(SpeedController)\r\n","import React from 'react'\r\nimport './Reset.css'\r\n\r\nfunction StopButton({resetme}) {\r\n    return (\r\n        <div className=\"CommonDev-Stop\">\r\n          <button className=\"StopButtonClass\" onClick={resetme}>\r\n            <p>Reset</p>\r\n            <div className=\"reset-circle\">\r\n            <i class=\"fa fa-refresh reset-circle-inside\"></i>\r\n            </div>\r\n          </button>   \r\n          </div>\r\n    )\r\n}\r\n\r\nexport default StopButton\r\n","import React from 'react'\r\nimport './PlayButton.css'\r\n\r\nfunction PlayButton({time}) {\r\n    return (\r\n        <div className=\"CommonDev-Play\">\r\n          <button onClick={time} className=\"PlayButtonClass\">\r\n            <p>Play</p>\r\n            <div className=\"play-circle\">\r\n            <i class=\"fa fa-play-circle play-circle-inside\"></i>\r\n            </div>\r\n          </button>   \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default PlayButton\r\n","import { useState, useEffect } from 'react';\r\nimport './Bars.css';\r\n\r\nconst Bars = ({ length, color }) => {\r\n\tconst [len, setLength] = useState(length);\r\n\r\n\tuseEffect(() => {\r\n\t\tsetLength(length);\r\n\t}, [length]);\r\n\r\n\tconst colors = ['#7D0AF8', '#C51216', '#83e85a'];\r\n\r\n\tlet barStyle = {\r\n\t\tbackground: colors[color],\r\n\t\theight: `${length}px`,\r\n\t\tmarginTop: `${490-length}px`,\r\n        width : `${50}px`\r\n\t};\r\n\t\r\n\r\n\r\n\treturn (\r\n        <>\r\n\t\t<div className='MainBar' style={barStyle}></div>\r\n        </>\r\n\t);\r\n};\r\n\r\nexport default Bars;\r\n","export function swap(array, indexA, indexB) {\r\n\tlet temp = array[indexA];\r\n\tarray[indexA] = array[indexB];\r\n\tarray[indexB] = temp;\r\n\treturn array;\r\n}\r\n\r\nexport function insertStep(arrayNew, position, arraySteps) {\r\n\tlet currentStep = arraySteps[arraySteps.length - 1].slice();\r\n\tcurrentStep.splice(position, arrayNew.length, ...arrayNew);\r\n\tarraySteps.push(currentStep);\r\n}\r\n","import { swap } from './helpers';\r\n\r\nconst bubbleSort = (array, position, arraySteps, colorSteps) => {\r\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\r\n  \r\n  \r\n\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    for (let j = 0; j < array.length - i - 1; j++) {\r\n      if (array[j] > array[j + 1]) {\r\n        array = swap(array, j, j + 1);\r\n      }\r\n      arraySteps.push(array.slice());\r\n      colorKey[j] = 1;\r\n      colorKey[j + 1] = 1;\r\n      colorSteps.push(colorKey.slice());\r\n      colorKey[j] = 0;\r\n      colorKey[j + 1] = 0;\r\n    }\r\n    colorKey[array.length - 1 - i] = 2;\r\n    arraySteps.push(array.slice());\r\n    colorSteps.push(colorKey.slice());\r\n  }\r\n\r\n  // Remaining bars become green\r\n  colorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\r\n  return;\r\n}\r\n\r\nexport default bubbleSort;","const insertionSort = (array, position, arraySteps, colorSteps) => {\n\tlet colorKey = colorSteps[colorSteps.length - 1].slice();\n\t\n\n\tlet i, j, key;\n\tfor (i = 1; i < array.length; i++) {\n\t\tkey = array[i];\n\t\tj = i - 1;\n\n\t\twhile (j >= 0 && array[j] > key) {\n\t\t\tarray[j + 1] = array[j];\n\t\t\tarraySteps.push(array.slice());\n\t\t\tcolorKey[i] = 3;\n            if ( i === j + 1 ){\n                colorKey[j + 1] = 4;\n            } else{\n                colorKey[j + 1] = 1;\n            }\n\t\t\tcolorKey[j] = 1;\n\t\t\tcolorSteps.push(colorKey.slice());\n\t\t\tconsole.log (j)\n            colorKey[j + 1] = 0;\n            colorKey[i] = 0;\n\t\t\tcolorKey[j] = 0;\n\t\t\tj = j - 1;\n\t\t}\n\t\tarray[j + 1] = key;\n\t\tarraySteps.push(array.slice());\n\t\tcolorSteps.push(colorKey.slice());\n\t}\n\tcolorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\n};\n\nexport default insertionSort;\n","import { insertStep } from './helpers';\n\nconst mergeSort = (array, position, arraySteps, colorSteps) => {\n\tif (array.length === 1) return array;\n\tlet mid = Math.floor(array.length / 2);\n\n\tlet L = mergeSort(array.slice(0, mid), position, arraySteps, colorSteps);\n\tlet R = mergeSort(array.slice(mid), position + mid, arraySteps, colorSteps);\n\n\tlet arrayNew = merge(L, R, position, arraySteps, colorSteps);\n\tarraySteps.push(arraySteps[arraySteps.length - 1].slice());\n\tcolorSteps.push(\n\t\tcolorSteps[colorSteps.length - 1]\n\t\t\t.slice()\n\t\t\t.fill(arrayNew.length === arraySteps[0].length ? 2 : 0)\n\t);\n\treturn arrayNew;\n};\n\nconst merge = (L, R, position, arraySteps, colorSteps) => {\n\tlet arrayNew = [];\n\tlet A = 0;\n\tlet B = 0;\n\n\twhile (L.length > 0 && R.length > 0) {\n\t\tif (L[A] < R[B]) {\n\t\t\tarrayNew.push(L.shift());\n\t\t\tinsertStep(arrayNew, position, arraySteps);\n\t\t} else {\n\t\t\tarrayNew.push(R.shift());\n\t\t\tinsertStep(arrayNew, position, arraySteps);\n\t\t}\n\t\tupdateColor(position, colorSteps, arrayNew.length - 1, [], []);\n\t}\n\n\n\tif (L.length !== 0 || R.length !== 0) {\n\t\tupdateColor(position, colorSteps, arrayNew.length, L, R);\n\t\tarrayNew = arrayNew.concat(L);\n\t\tarrayNew = arrayNew.concat(R);\n\t\tinsertStep(arrayNew, position, arraySteps);\n\t}\n\n\treturn arrayNew;\n};\n\nconst updateColor = (position, colorSteps, start, L, R) => {\n\tlet colorKey = colorSteps[colorSteps.length - 1].slice();\n\tlet end = position + start + L.length + R.length;\n\tstart = start + position;\n\n\tif (end === start) {\n\t\tcolorKey.fill(1, start, end + 1);\n\t} else {\n\t\tcolorKey.fill(0, start, end);\n\t}\n\tcolorSteps.push(colorKey);\n};\n\nexport default mergeSort;\n","import { swap, insertStep } from './helpers';\n\nconst quickSort = (array, position, arraySteps, colorSteps) => {\n  if (array.length < 2) {\n    insertStep(array, position, arraySteps);\n\n    let colorKey = colorSteps[colorSteps.length - 1].slice();\n    colorKey[position] = 2;\n    colorSteps.push(colorKey);\n    return;\n  }\n\n  // pick median of three numbers as pivot and sent it to back\n  swap(array, pickPivot(array), array.length - 1);\n  insertStep(array, position, arraySteps);\n  colorSteps.push(colorSteps[colorSteps.length - 1].slice());\n\n  let pivot = array[array.length - 1];\n  let A = 0;\n  let B = array.length - 1;\n\n  // swap small value from right with big value from left\n  while (A < B) {\n    while (array[A] < pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      A++;\n    }\n    while (array[B] >= pivot) {\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n      B--;\n    }\n    if (A < B) {\n      swap(array, A, B);\n      insertStep(array, position, arraySteps);\n      let colorKey = colorSteps[colorSteps.length - 1].slice();\n      colorKey = colorKey.map(key => key === 2 ? 2 : 0);\n      colorKey[position + A] = 1;\n      colorKey[position + B] = 1;\n      colorSteps.push(colorKey);\n    }\n  }\n\n  // swap big value with pivot\n  let bigIndex = Math.max(A, B);\n\n  swap(array, bigIndex, array.length - 1);\n  insertStep(array, position, arraySteps);\n  let colorKey = colorSteps[colorSteps.length - 1].slice();\n  colorKey[position + bigIndex] = 2;\n  colorSteps.push(colorKey);\n\n  // recurse on two halves\n  quickSort(array.slice(0, A), position, arraySteps, colorSteps);\n  quickSort(array.slice(A + 1), position + A + 1, arraySteps, colorSteps);\n\n  return;\n}\n\nfunction pickPivot(array) {\n  let A = array[0];\n  let B = array[Math.floor(array.length / 2)];\n  let C = array[array.length - 1];\n\n  let middleValue = [A, B, C].sort()[1];\n  let middleIndex = array.indexOf(middleValue);\n\n  return middleIndex;\n}\n\nexport default quickSort;","import { swap } from './helpers';\n\nconst selectionSort = (array, position, arraySteps, colorSteps) => {\n\tlet colorKey = colorSteps[colorSteps.length - 1].slice();\n\n\tfor (let i = 0; i < array.length - 1; i++) {\n\t\tlet min_index = i;\n\t\tfor (let j = i + 1; j < array.length; j++) {\n\t\t\tif (array[j] < array[min_index]) {\n\t\t\t\tmin_index = j;\n\t\t\t}\n\n\t\t\tcolorKey[min_index] = 1;\n\t\t\tcolorKey[j] = 1;\n\t\t\tarraySteps.push(array.slice());\n\t\t\tcolorSteps.push(colorKey.slice());\n\t\t\tcolorKey[min_index] = 0;\n\t\t\tcolorKey[j] = 0;\n\t\t}\n\t\tswap(array, min_index, i);\n        colorKey[i] = 2;\n\t\tarraySteps.push(array.slice());\n\t\tcolorSteps.push(colorKey.slice());\n\t}\n\tcolorSteps[colorSteps.length - 1] = new Array(array.length).fill(2);\n\tconsole.log(array);\n};\n\nexport default selectionSort;\n","export default __webpack_public_path__ + \"static/media/max.28d26960.wav\";","import React, { useState } from 'react'\r\nimport './SideConcepts.css'\r\n\r\nfunction SideConcepts({DownArrow, AlgoName, AlgoDes, AlgoWorst, AlgoAverage, AlgoBest, AlgoPseudocode}) {\r\n    const Worst = AlgoWorst[1];\r\n    console.log(Worst);\r\n    \r\n    return (\r\n        <>\r\n        <div className=\"SideConcepts\" >\r\n\r\n            <div className=\"side-bar\">\r\n            <div className=\"TopConcepts\">\r\n                <div className=\"AlgoName\">\r\n                    <p>{AlgoName}</p>\r\n                </div>\r\n                <div className=\"AlgoAbout\">\r\n                    <p>\r\n                      {AlgoDes}\r\n                    </p>\r\n                </div>\r\n                <div className=\"AlgoTimeCompTitle\">\r\n                    <p>Time Complexity:</p>\r\n                </div>\r\n                <div className=\"AlgoTimeComp\">\r\n                    <p>Worst Case: <span>{AlgoWorst[0]}({AlgoWorst[1]}<sup>{AlgoWorst[2]}</sup>{AlgoWorst[3]})</span></p>\r\n                    <p>Average Case: <span>{AlgoAverage[0]}({AlgoAverage[1]}<sup>{AlgoAverage[2]}</sup>{AlgoWorst[3]})</span></p>\r\n                    <p>Best Case: <span>{AlgoBest[0]}({AlgoBest[1]}<sup>{AlgoBest[2]}</sup>{AlgoWorst[3]})</span></p>\r\n                </div>\r\n            </div>\r\n            <div className=\"EndConcepts\">\r\n                <div className=\"ContentBoxTitle\">\r\n                    <p>Pseudocode</p>\r\n                </div>\r\n                <div className=\"ContentBox\">\r\n                    <p>\r\n                        {AlgoPseudocode}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            </div>            \r\n        </div>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default SideConcepts\r\n","import React from 'react'\r\n\r\nfunction OpenAlgoBar({spanleft, spanright, sleft, sright}) {\r\n    return (\r\n        \r\n        <div className=\"OpenAlgoBar\">\r\n          <span className=\"Span-1\">\r\n          <p>F</p>\r\n          <p>O</p>\r\n          <p>R</p>\r\n          <p>M</p>\r\n          <p>U</p>\r\n          <p>L</p>\r\n          <p>A</p>\r\n          </span>\r\n          <span className=\"Span-2\">\r\n            <div className=\"Span-2-left\" onClick={spanleft} style={{display: `${sleft}`}}>\r\n              <i class='fas fa-caret-left' />\r\n            </div>\r\n            <div className=\"Span-2-right\" onClick={spanright} style={{display: `${sright}`}}>\r\n              <i class='fas fa-caret-right' />\r\n            </div>\r\n          </span>          \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default OpenAlgoBar\r\n","import React from 'react'\r\n\r\nfunction OpenAlgoBarDown({spanleft, spanright, sleft, sright}) {\r\n    return (\r\n        \r\n        <div className=\"OpenAlgoBar-Down\">\r\n          <span className=\"Span-1-Down\">\r\n          <p>F O R M U L A</p>\r\n          </span>\r\n          <span className=\"Span-2-Down\">\r\n            <div className=\"Span-2-left-Down\" onClick={spanleft} style={{display: `${sleft}`}}>\r\n              <i class='fas fa-caret-up' />\r\n            </div>\r\n            <div className=\"Span-2-right-Down\" onClick={spanright} style={{display: `${sright}`}}>\r\n              <i class='fas fa-caret-down' />\r\n            </div>\r\n          </span>          \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default OpenAlgoBarDown","\nimport './App.css'\nimport ArraySizeControl from './components/ArraySizeControl/ArraySizeControl'\nimport AlgorithmsBox from './components/Algorithms/AlgorithmsBox'\nimport SpeedController from './components/SpeedController/SpeedController'\nimport ResetButton from './components/ResetButton/Reset'\nimport PlayButton from './components/PlayButton/PlayButton'\nimport Bars from './components/Bars/Bars'\nimport BubbleSort from './components/algo/BubbleSort'\nimport InsertionSort from './components/algo/InsertionSort'\nimport MergeSort from './components/algo/MergeSort'\nimport QuickSort from './components/algo/QuickSort'\nimport SelectionSort from './components/algo/SelectionSort'\nimport Max from './max.wav';\nimport SideConcepts from './components/SideConcepts/SideConcepts'\nimport RightSideData from './components/RightSideContext/RightSideContext'\nimport OpenAlgoBar from './components/OpenAlgoBar/OpenAlgoBar'\nimport OpenAlgoBarDown from './components/OpenAlgoBar/OpenAlgoBarDown'\nimport { Howl, Howler } from 'howler';\nimport React, { Component } from 'react'\n\nconst audioClips = [\n  {sound: Max, label: \"brust\"}\n]\n\n\nclass App extends Component {\n  state = {\n    spanClass: \"span\",\n\t\tarray: [],\n\t\tarraySteps: [],\n\t\tcolorKey: [],\n\t\tcolorSteps: [],\n\t\ttimeouts: [],\n\t\tcurrentStep: 0,\n\t\tbarCount: 10,\n\t\tdelay: 150,\n\t\talgorithm: 'Bubble Sort',\n    algorithmType: 'Bubble Sort',\n    speedValue: 1,\n    speedSpanClass: \"SpeedSpan\",\n    re: false,\n    nameOfAlgo: '',\n    nameofDes: '',\n    nameOfWorst: '',\n    nameOfAverage: '',\n    nameOfBest: '',\n    nameOfPseudocode: '',\n    sleft: 'block',\n    sright: 'none',\n    M1: 'block',\n    M2: '',\n    navWidth: 0\n\t};\n\n  SoundPlay = (src) => {\n    const sound = new Howl({\n      src\n    })\n    sound.play();\n  }\n  RenderButtonAndSound = () => {\n    return audioClips.map((soundObj, index) => {\n      return (\n         this.SoundPlay(soundObj.sound)\n      )\n    })\n  }\n\n\n  newAlgorithmsTypes = (event) => {\n    this.setState({\n      algorithmType: `${event}`\n    },\n    () => this.generateBars()\n    )\n  }\n\n\tALGORITHMS = {\n\t\t'Bubble Sort': BubbleSort,\n    'Merge Sort': MergeSort,\n\t\t'Quick Sort': QuickSort,\n\t\t'Insertion Sort': InsertionSort,\n\t\t'Selection Sort': SelectionSort,\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.generateBars();\n    \n\t}\n\n  \n\n\tsetTimeouts = () => {\n\t\tlet steps = this.state.arraySteps;\n\t\tlet colorSteps = this.state.colorSteps;\n\n\t\tthis.clearTimeouts();\n\t\tlet timeouts = [];\n\n\t\tlet i = 0;\n\n\t\twhile (i < steps.length - this.state.currentStep) {\n\t\t\tlet timeout = setTimeout(() => {\n\t\t\t\tlet currentStep = this.state.currentStep;\n\t\t\t\tthis.setState({\n\t\t\t\t\tarray: steps[currentStep],\n\t\t\t\t\tcolorKey: colorSteps[currentStep],\n\t\t\t\t\tcurrentStep: currentStep + 1,\n\t\t\t\t});\n\t\t\t\ttimeouts.push(timeout);\n        // if((steps.length - this.state.currentStep) === 0){\n        //   alert(\"compeleted\")\n        // }\n        this.RenderButtonAndSound()\n\t\t\t}, ((this.state.delay)/this.state.speedValue) * i);\n\t\t\ti++;\n      \n\t\t}\n\n\t\tthis.setState({\n\t\t\ttimeouts: timeouts,\n\t\t});\n    \n\t};\n\n\tclearTimeouts = () => {\n\t\tthis.state.timeouts.forEach((timeout) => clearTimeout(timeout));\n\t\tthis.setState({ timeouts: [] });\n\t};\n\n\tclearColorKey = () => {\n\t\tlet blankKey = new Array(this.state.barCount).fill(0);\n\t\tthis.setState({ colorKey: blankKey, colorSteps: [blankKey] });\n\t};\n\n\tgenerateSteps = () => {\n\t\tlet array = this.state.array.slice();\n\t\tlet steps = this.state.arraySteps.slice();\n\t\tlet colorSteps = this.state.colorSteps.slice();\n\t\tthis.ALGORITHMS[this.state.algorithmType](array, 0, steps, colorSteps); \n\n\n\n    if(this.state.algorithmType === \"Bubble Sort\"){\n      this.setState({\n        nameOfAlgo: this.state.algorithmType,\n        nameofDes: RightSideData.AlogrithmDescription[0],\n        nameOfWorst: RightSideData.WorstCase[0],\n        nameOfAverage: RightSideData.AverageCase[0],\n        nameOfBest: RightSideData.BestCase[0],\n        nameOfPseudocode: RightSideData.Pseudocode[0][0]\n      })      \n    }\n    else if(this.state.algorithmType === \"Merge Sort\"){\n      this.setState({\n        nameOfAlgo: this.state.algorithmType,\n        nameofDes: RightSideData.AlogrithmDescription[1],\n        nameOfWorst: RightSideData.WorstCase[1],\n        nameOfAverage: RightSideData.AverageCase[1],\n        nameOfBest: RightSideData.BestCase[1],\n        nameOfPseudocode: RightSideData.Pseudocode[0][1]\n      })\n    }\n    else if(this.state.algorithmType === \"Quick Sort\"){\n      this.setState({\n        nameOfAlgo: this.state.algorithmType,\n        nameofDes: RightSideData.AlogrithmDescription[2],\n        nameOfWorst: RightSideData.WorstCase[2],\n        nameOfAverage: RightSideData.AverageCase[2],\n        nameOfBest: RightSideData.BestCase[2],\n        nameOfPseudocode: RightSideData.Pseudocode[0][2]\n      })\n    }\n    else if(this.state.algorithmType === \"Insertion Sort\"){\n      this.setState({\n        nameOfAlgo: this.state.algorithmType,\n        nameofDes: RightSideData.AlogrithmDescription[3],\n        nameOfWorst: RightSideData.WorstCase[3],\n        nameOfAverage: RightSideData.AverageCase[3],\n        nameOfBest: RightSideData.BestCase[3],\n        nameOfPseudocode: RightSideData.Pseudocode[0][3]\n      })\n    }\n    else if(this.state.algorithmType === \"Selection Sort\"){\n      this.setState({\n        nameOfAlgo: this.state.algorithmType,\n        nameofDes: RightSideData.AlogrithmDescription[4],\n        nameOfWorst: RightSideData.WorstCase[4],\n        nameOfAverage: RightSideData.AverageCase[4],\n        nameOfBest: RightSideData.BestCase[4],\n        nameOfPseudocode: RightSideData.Pseudocode[0][4]\n      })\n    }\n    else{\n      this.setState({\n        nameOfAlgo: '',\n        nameofDes: '',\n        nameOfWorst: '',\n        nameOfAverage: '',\n        nameOfBest: ''\n      })\n    }\n\n    \n\n\n  \tthis.setState({\n\t\t\tarraySteps: steps,\n\t\t\tcolorSteps: colorSteps,\n\t\t});\n\t};\n\n\tgenerateRandomNumber = (min, max) => {\n\t\treturn Math.floor(Math.random() * (max - min) + min);\n\t};\n\n\tgenerateBars = () => {\n\t\tthis.clearTimeouts();\n\t\tthis.clearColorKey();\n\n\t\tlet barCount = this.state.barCount;\n\t\tlet arr = [];\n\n\t\tfor (let i = 0; i < barCount; i++) {\n\t\t\tarr.push(this.generateRandomNumber(50, 300));\n\t\t}\n\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tarray: arr,\n\t\t\t\tarraySteps: [arr],\n\t\t\t\tbarCount: barCount,\n\t\t\t\tcurrentStep: 0,\n\t\t\t},\n\t\t\t() => this.generateSteps()\n\t\t);\n\t};\n \n\n\n\n  \n  handleOnInput= (event) => {\n    this.clearTimeouts();\n\t\tthis.clearColorKey();\n    this.setState({\n      barCount: parseInt(event.target.value),\n      spanClass: \"show\"\n    },\n    () => this.generateBars(),\n    )\n  }\n  handleOnSpeed= (event) => {\n    this.setState({\n      speedValue: event.target.value,\n      speedSpanClass: \"ShowSpeedSpan\"\n    })\n  }\n  resetme = () =>{\n    this.setState({\n      re: true\n    },\n    () => this.generateBars()\n    )\n  }\n  \n\n\n\n  spanleft = () => {\n    \n    this.setState({\n      sleft: 'none',\n      sright: 'block',\n      M1: 'none',\n      M2: 'block'\n    })\n  }\n  spanright = () => {\n    this.setState({\n      sleft: 'block',\n      sright: 'none',\n      M1: 'block',\n      M2: 'none'\n    })\n  }\n  \n  closeNav = () =>{\n    this.setState({\n      navWidth: 0\n    })\n  }\n  openNav = () => {\n    this.setState({\n      navWidth: 290\n    })\n  }\n\n  \n\n\n  render(){\n    Howler.volume(1.0)\n    let barsDiv = this.state.array.map((value, index) => (\n\t\t\t<Bars\n\t\t\t\tkey={index}\n\t\t\t\tlength={value}\n\t\t\t\tcolor={this.state.colorKey[index]}\n\t\t\t/>\n\t\t));\n  \n  return (\n    <div className=\"App\">\n      \n      \n      <div id=\"mySidenav\" className=\"sidenav\" style={{width: `${this.state.navWidth}px`, zIndex: 200}}>\n        <a href=\"javascript:void(0)\" className=\"closebtn\" onClick={this.closeNav}>&times;</a>\n        \n        <div className=\"ArraySize-nav\" >\n          <ArraySizeControl value={this.state.barCount} handleOnInput={this.handleOnInput} spanClass={this.state.spanClass} />\n        </div>\n        <div className=\"SortingSpeed-nav\">\n        <SpeedController value={this.state.speedValue} handleOnSpeed={this.handleOnSpeed} spanClass={this.state.speedSpanClass} />\n        </div>\n        <div className=\"Algorithm-nav\">\n          <AlgorithmsBox algorithmType={this.state.AlgorithmsTypes} algorithmfun={this.newAlgorithmsTypes} /> \n        </div>\n\n      </div>\n\n      <div className=\"MainTitle\"><p>Sorting Visualizer</p></div>\n      <div className=\"UpperBar\">\n\n        \n        <div className=\"ThreeArrow\">\n          <span onClick={this.openNav}><i class=\"fa fa-reorder\" /></span>\n        </div>\n        <div className=\"TopTitle\">\n          <p>Sorting Visualizer</p>\n        </div>\n        \n        \n        <div className=\"ArraySize\" >\n          <ArraySizeControl value={this.state.barCount} handleOnInput={this.handleOnInput} spanClass={this.state.spanClass} />\n        </div>\n        <div className=\"Algorithm\">\n          <AlgorithmsBox algorithmType={this.state.AlgorithmsTypes} algorithmfun={this.newAlgorithmsTypes} /> \n        </div>\n        <div className=\"SortingSpeed\">\n        <SpeedController value={this.state.speedValue} handleOnSpeed={this.handleOnSpeed} spanClass={this.state.speedSpanClass} />\n        </div>\n        <div className=\"Stop\">\n          <ResetButton resetme={this.resetme}/>\n        </div>\n        <div className=\"Play\">\n          <PlayButton time={this.setTimeouts} />\n        </div>\n      </div>\n \n      <div className=\"MainContant\">\n        <OpenAlgoBar spanleft={this.spanleft} spanright={this.spanright} sleft={this.state.sleft} sright={this.state.sright}/>\n        <OpenAlgoBarDown spanleft={this.spanleft} spanright={this.spanright} sleft={this.state.sleft} sright={this.state.sright}/>\n        \n \n\n\n          {/* {MainContant-1}  */}\n          <div className=\"MainContant-1\" style={{display: this.state.M1}}>\n            <div className=\"ContantInside\">\n            {\n              barsDiv\n            }\n            </div>\n            <div className=\"MainBetween\">\n              <div className=\"Stop-1200\">\n                <ResetButton resetme={this.resetme}/>\n              </div>\n              <div className=\"Play-1200\">\n                <PlayButton time={this.setTimeouts} />\n              </div>\n            </div>\n          </div>\n          \n          {/* {MainContant-2} */}\n          <div className=\"MainContant-2\" style={{display: this.state.M2}}>\n               <SideConcepts \n               \n               AlgoName={this.state.nameOfAlgo} \n               AlgoDes={this.state.nameofDes} \n               AlgoWorst={this.state.nameOfWorst}\n               AlgoAverage={this.state.nameOfAverage}\n               AlgoBest={this.state.nameOfBest} \n               AlgoPseudocode={this.state.nameOfPseudocode}\n               />\n          </div>\n      \n      </div>\n    </div>\n  )\n }\n}\n\nexport default App\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const [value, setValue] = useState(10);\n  // const [spanClass, setSpanClass] = useState(\"span\");\n  // const [algorithmType, setAlgorithmType] = useState([]);\n  // const [speedValue, setSpeedValue] = useState(1);\n  // const [speedSpanClass, setSpeedSpanClass] = useState(\"SpeedSpan\");\n  // const [array, setArray] = useState([])\n  // const [colorSteps, setColorSteps] = useState([])\n  // const [colorKey, setColorKey] = useState([])\n  // const [arraySteps, setArraySteps] = useState([])\n  // const [statusBar, setStatusBar] = useState(false)\n  // const [timeouts, setTimeouts] = useState([]) \n  // const [barCount, setBarCount] =useState()\n  // const [currentStep, setCurrentStep] = useState(0)\n  // const [delay, setDelay] = useState(300)\n\n\n  // //start {Generate Array with Random values}\n  \n  // const GenerateRandomArray = (min, max) =>{\n  //   return Math.floor(Math.random()*(max-min)+min)\n  // }\n  // const GenerateArray = () => {\n  //   const a = []\n  //   for(let i=0; i< value; i++){\n  //     a.push(GenerateRandomArray(5,300))\n  //   }\n  //   useEffect(() => {\n  //     setArray(a)\n  //     setColorKey(0)\n  //   },[value])\n  // }  \n  // GenerateArray()\n  // //end {Generate Array with Random values}\n  \n\n  \n  // const handleOnInput= useCallback((event) => {\n  //   setValue(event.target.value);\n  //   setSpanClass(\"show\")\n  // }, [value])\n  // const handleOnSpeed= useCallback((event) => {\n  //   setSpeedValue(event.target.value);\n  //   setSpeedSpanClass(\"ShowSpeedSpan\")\n  // }, [speedValue])\n\n  // const GenetarateSortedArray = () => {\n  //   let local = array;\n\t// \tlet steps = arraySteps;\n\t// \tlet colorStep = colorSteps;\n  //   BubbleSort(local, steps, colorStep)\n  //   // console.log(colorStep)\n  //   setArray(local)\n  //   setStatusBar(true)\n  // }\n  \n  \n  // const barsDiv = () =>( array.map((res,index) => (\n  //   <Bars length={res} color={colorKey} />\n  // ))\n  // )","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}